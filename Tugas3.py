# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16IvYFAH2F8_qEIQS7lj9KA01rK-ZHvfs

**Greedy Search**
"""

from queue import PriorityQueue

def reconstruct_path(came_from, start, goal):
    current = goal
    path = []

    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

def greedy_search(graph, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic[start], start))
    came_from = {}
    explored = set()

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek:", path)
            return path

        explored.add(current_node)

        for neighbor in graph[current_node]:
            if neighbor not in explored and neighbor not in came_from:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node

    print("Simpul tujuan tidak ditemukan!")
    return None

heuristic = {
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'S': 6,
    'G': 0
}

graph = {
    'S': ['A', 'B'],
    'A': ['B', 'D'],
    'B': ['D', 'C'],
    'C': ['D', 'G'],
    'D': ['G'],
}

start_node = 'S'
goal_node = 'G'

greedy_search(graph, start_node, goal_node)

"""**A Star Search**"""

from queue import PriorityQueue
from os import path

# Fungsi untuk merekonstruksi jalur
def reconstruct_path(came_from, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = came_from[current]
        route.append(current)
    route.reverse()
    return route

# Algoritma Greedy Best-First Search
def greedy_search(graph, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic[start], start))  # Tambahkan simpul awal
    came_from = {}  # Menyimpan jalur
    explored = set()  # Menyimpan simpul yang sudah dikunjungi

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek:", path)
            return path

        explored.add(current_node)

        for neighbor in graph[current_node]:
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node

    print("Simpul tujuan tidak ditemukan!")
    return None

# Algoritma A* (A Star) Search
def a_star_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()
    frontier.put((0, start))  # (Priority, Node)
    came_from = {}
    cost_so_far = {start: 0}

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
            print("Goal node found!")
            path = reconstruct_path(came_from, start, goal)
            print("Optimal path:", path)
            return path

        for neighbor, cost in graph[current_node].items():
            new_cost = cost_so_far[current_node] + cost
            if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                cost_so_far[neighbor] = new_cost
                priority = new_cost + heuristic[neighbor]
                frontier.put((priority, neighbor))
                came_from[neighbor] = current_node

    print("Goal node not found!")
    return None

# Daftar heuristik
heuristic = {
    'A': 9,
    'B': 4,
    'C': 2,
    'D': 5,
    'E': 7,
    'S': 7,
    'G': 0
}

# Graf menggunakan dictionary dengan biaya
graph = {
    'S': {'A': 3, 'E': 2},
    'A': {'B': 1, 'C': 4},
    'B': {'G': 5},
    'C': {'G': 2},
    'E': {'D': 3},
    'D': {'G': 5}
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Menjalankan algoritma
print("Greedy Best-First Search:")
greedy_search(graph, start_node, goal_node)

print("\nA* (A Star) Search:")
a_star_search(graph, start_node, goal_node, heuristic)

"""**A Star Search (yg sudah dirubah)**"""

from queue import PriorityQueue
from os import path

def reconstruct_path(came_from, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = came_from[current]
        route.append(current)
    route.reverse()
    return route

def greedy_search(graph, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic[start], start))
    came_from = {}
    explored = set()

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
            print("Simpul tujuan ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek:", path)
            return path

        explored.add(current_node)

        for neighbor in graph[current_node]:
            if neighbor not in explored:
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node

    print("Simpul tujuan tidak ditemukan!")
    return None

def a_star_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()
    frontier.put((0, start))
    came_from = {}
    cost_so_far = {start: 0}

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
            print("Goal node found!")
            path = reconstruct_path(came_from, start, goal)
            print("Optimal path:", path)
            return path

        for neighbor, cost in graph[current_node].items():
            new_cost = cost_so_far[current_node] + cost
            if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                cost_so_far[neighbor] = new_cost
                priority = new_cost + heuristic[neighbor]
                frontier.put((priority, neighbor))
                came_from[neighbor] = current_node

    print("Goal node not found!")
    return None

heuristic = {
    'A': 9,
    'B': 4,
    'C': 2,
    'D': 5,
    'E': 7,
    'S': 7,
    'G': 0
}

graph = {
    'S': {'A': 3, 'B': 2},
    'A': {'B': 1, 'D': 5},
    'B': {'D': 3, 'C': 2},
    'C': {'G': 4, 'D': 3},
    'D': {'G': 5}
}

start_node = 'S'
goal_node = 'G'

print("Greedy Best-First Search:")
greedy_search(graph, start_node, goal_node)

print("\nA* (A Star) Search:")
a_star_search(graph, start_node, goal_node, heuristic)