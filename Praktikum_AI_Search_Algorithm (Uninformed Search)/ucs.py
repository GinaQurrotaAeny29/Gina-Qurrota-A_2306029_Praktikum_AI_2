# -*- coding: utf-8 -*-
"""UCS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UTGQH_mLmRqAVpg7Dp-jm-mK39-C2TdU

**UCS**
"""

import heapq

def uniform_cost_search(goal, start):
    global graph, cost
    answer = [float('inf')] * len(goal)  # Inisialisasi biaya ke nilai maksimum
    queue = []
    heapq.heappush(queue, (0, start))  # Gunakan heap sebagai priority queue
    visited = {}

    count = 0

    while queue:
        p = heapq.heappop(queue)  # Ambil node dengan biaya minimum
        current_cost, node = p

        if node in goal:
            index = goal.index(node)
            if answer[index] == float('inf'):
                count += 1
            if answer[index] > current_cost:
                answer[index] = current_cost
            if count == len(goal):
                return answer

        if node not in visited:
            visited[node] = True
            for i in range(len(graph[node])):
                next_node = graph[node][i]
                new_cost = current_cost + cost[(node, next_node)]
                heapq.heappush(queue, (new_cost, next_node))

    return answer

if __name__ == '__main__':
    # Membuat graf
    graph = [[] for i in range(8)]
    cost = {}

    # Menambahkan edge
    graph[0].append(1)
    graph[0].append(3)
    graph[3].append(1)
    graph[3].append(6)
    graph[3].append(4)
    graph[1].append(6)
    graph[4].append(2)
    graph[4].append(5)
    graph[2].append(1)
    graph[5].append(2)
    graph[5].append(6)
    graph[6].append(4)

    # Menambahkan biaya antar node
    cost[(0, 1)] = 2
    cost[(0, 3)] = 5
    cost[(1, 6)] = 1
    cost[(3, 1)] = 5
    cost[(3, 6)] = 6
    cost[(3, 4)] = 2
    cost[(4, 2)] = 4
    cost[(4, 5)] = 3
    cost[(5, 2)] = 6
    cost[(5, 6)] = 3
    cost[(6, 4)] = 7

    # Menentukan goal state
    goal = [6]

    # Menjalankan UCS
    answer = uniform_cost_search(goal, 0)

    # Mencetak hasil
    print("Minimum cost from 0 to 6 is =", answer[0])